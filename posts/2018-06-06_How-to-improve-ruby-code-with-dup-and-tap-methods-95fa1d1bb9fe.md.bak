---
title: How to improve ruby code with dup and tap methods
description: 'Here is a piece of my old code, but it’s definitely could be improved.'
date: '2018-06-06T15:50:30.746Z'
categories: []
keywords: []
slug: /@mprokopov/how-to-improve-ruby-code-with-dup-and-tap-methods-95fa1d1bb9fe
---

Here is a piece of my old code, but it’s definitely could be improved.

def to\_params  
 h = ticket\_params  
 h\[:activity\] = extract\_activity if extract\_activity  
 h\[:event\] = extract\_event if extract\_event  
 h.delete(:state\_event)  
 h.delete(:activities\_attributes)  
 h  
 end

As you can see here, ‘h’ variable name is quite uncommunicative. Could it be refactored?

Let’s see, h= ticket\_params. We call this because we don’t want to modify ticket\_params. Is there any method which creates a copy?

It turns out we have dup method which creates a copy of an object, this is exactly what we wanted. Then, we have tap method, which allows us to dive in object internals and return then itself. Here is whole new piece of code after refactoring.

def to\_params  
  ticket\_params.dup.tap do |params|  
    params\[:activity\] = extract\_activity if extract\_activity  
    params\[:event\] = extract\_event if extract\_event  
    params.delete(:state\_event)  
    params.delete(:activities\_attributes)  
  end  
end

Much better now and we do not have any redundant variable!